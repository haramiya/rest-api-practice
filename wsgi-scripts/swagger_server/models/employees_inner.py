# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class EmployeesInner(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, employee_id: str=None, employee_name: str=None, dept: str=None, joining_year: date=None, title: str=None, grade: str=None, recruitment_class: str=None, gender: str=None, birthdate: date=None):  # noqa: E501
        """EmployeesInner - a model defined in Swagger

        :param employee_id: The employee_id of this EmployeesInner.  # noqa: E501
        :type employee_id: str
        :param employee_name: The employee_name of this EmployeesInner.  # noqa: E501
        :type employee_name: str
        :param dept: The dept of this EmployeesInner.  # noqa: E501
        :type dept: str
        :param joining_year: The joining_year of this EmployeesInner.  # noqa: E501
        :type joining_year: date
        :param title: The title of this EmployeesInner.  # noqa: E501
        :type title: str
        :param grade: The grade of this EmployeesInner.  # noqa: E501
        :type grade: str
        :param recruitment_class: The recruitment_class of this EmployeesInner.  # noqa: E501
        :type recruitment_class: str
        :param gender: The gender of this EmployeesInner.  # noqa: E501
        :type gender: str
        :param birthdate: The birthdate of this EmployeesInner.  # noqa: E501
        :type birthdate: date
        """
        self.swagger_types = {
            'employee_id': str,
            'employee_name': str,
            'dept': str,
            'joining_year': date,
            'title': str,
            'grade': str,
            'recruitment_class': str,
            'gender': str,
            'birthdate': date
        }

        self.attribute_map = {
            'employee_id': 'employeeId',
            'employee_name': 'employeeName',
            'dept': 'dept',
            'joining_year': 'joiningYear',
            'title': 'title',
            'grade': 'grade',
            'recruitment_class': 'recruitmentClass',
            'gender': 'gender',
            'birthdate': 'birthdate'
        }
        self._employee_id = employee_id
        self._employee_name = employee_name
        self._dept = dept
        self._joining_year = joining_year
        self._title = title
        self._grade = grade
        self._recruitment_class = recruitment_class
        self._gender = gender
        self._birthdate = birthdate

    @classmethod
    def from_dict(cls, dikt) -> 'EmployeesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Employees_inner of this EmployeesInner.  # noqa: E501
        :rtype: EmployeesInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def employee_id(self) -> str:
        """Gets the employee_id of this EmployeesInner.


        :return: The employee_id of this EmployeesInner.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id: str):
        """Sets the employee_id of this EmployeesInner.


        :param employee_id: The employee_id of this EmployeesInner.
        :type employee_id: str
        """

        self._employee_id = employee_id

    @property
    def employee_name(self) -> str:
        """Gets the employee_name of this EmployeesInner.


        :return: The employee_name of this EmployeesInner.
        :rtype: str
        """
        return self._employee_name

    @employee_name.setter
    def employee_name(self, employee_name: str):
        """Sets the employee_name of this EmployeesInner.


        :param employee_name: The employee_name of this EmployeesInner.
        :type employee_name: str
        """

        self._employee_name = employee_name

    @property
    def dept(self) -> str:
        """Gets the dept of this EmployeesInner.


        :return: The dept of this EmployeesInner.
        :rtype: str
        """
        return self._dept

    @dept.setter
    def dept(self, dept: str):
        """Sets the dept of this EmployeesInner.


        :param dept: The dept of this EmployeesInner.
        :type dept: str
        """

        self._dept = dept

    @property
    def joining_year(self) -> date:
        """Gets the joining_year of this EmployeesInner.


        :return: The joining_year of this EmployeesInner.
        :rtype: date
        """
        return self._joining_year

    @joining_year.setter
    def joining_year(self, joining_year: date):
        """Sets the joining_year of this EmployeesInner.


        :param joining_year: The joining_year of this EmployeesInner.
        :type joining_year: date
        """

        self._joining_year = joining_year

    @property
    def title(self) -> str:
        """Gets the title of this EmployeesInner.


        :return: The title of this EmployeesInner.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this EmployeesInner.


        :param title: The title of this EmployeesInner.
        :type title: str
        """

        self._title = title

    @property
    def grade(self) -> str:
        """Gets the grade of this EmployeesInner.


        :return: The grade of this EmployeesInner.
        :rtype: str
        """
        return self._grade

    @grade.setter
    def grade(self, grade: str):
        """Sets the grade of this EmployeesInner.


        :param grade: The grade of this EmployeesInner.
        :type grade: str
        """

        self._grade = grade

    @property
    def recruitment_class(self) -> str:
        """Gets the recruitment_class of this EmployeesInner.


        :return: The recruitment_class of this EmployeesInner.
        :rtype: str
        """
        return self._recruitment_class

    @recruitment_class.setter
    def recruitment_class(self, recruitment_class: str):
        """Sets the recruitment_class of this EmployeesInner.


        :param recruitment_class: The recruitment_class of this EmployeesInner.
        :type recruitment_class: str
        """

        self._recruitment_class = recruitment_class

    @property
    def gender(self) -> str:
        """Gets the gender of this EmployeesInner.


        :return: The gender of this EmployeesInner.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender: str):
        """Sets the gender of this EmployeesInner.


        :param gender: The gender of this EmployeesInner.
        :type gender: str
        """

        self._gender = gender

    @property
    def birthdate(self) -> date:
        """Gets the birthdate of this EmployeesInner.


        :return: The birthdate of this EmployeesInner.
        :rtype: date
        """
        return self._birthdate

    @birthdate.setter
    def birthdate(self, birthdate: date):
        """Sets the birthdate of this EmployeesInner.


        :param birthdate: The birthdate of this EmployeesInner.
        :type birthdate: date
        """

        self._birthdate = birthdate
